@page "/"
@using SmokeQuit.BusinessObject.Shared.Models.DuongLNT.Models
@using System.Text

<h3 class="text-center mt-4">📊 Leaderboards</h3>

<!-- FORM nhập liệu -->
<EditForm Model="@LeaderboardPM" OnValidSubmit="OcelotSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-md-4 mb-3">
            <label>User ID:</label>
            <InputNumber @bind-Value="LeaderboardPM.UserId" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.UserId)" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Plan ID:</label>
            <InputNumber @bind-Value="LeaderboardPM.PlanId" class="form-control" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Days Smoke-Free:</label>
            <InputNumber @bind-Value="LeaderboardPM.DaySmokeFree" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.DaySmokeFree)" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Money Saved:</label>
            <InputNumber @bind-Value="LeaderboardPM.MoneySave" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.MoneySave)" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Rank:</label>
            <InputNumber @bind-Value="LeaderboardPM.RankPosition" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.RankPosition)" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Achievements:</label>
            <InputNumber @bind-Value="LeaderboardPM.TotalAchievements" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.TotalAchievements)" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Score:</label>
            <InputNumber @bind-Value="LeaderboardPM.ProgressScore" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.ProgressScore)" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Note:</label>
            <InputText @bind-Value="LeaderboardPM.Note" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.Note)" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Streak:</label>
            <InputNumber @bind-Value="LeaderboardPM.StreakCount" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.StreakCount)" />
        </div>

        <div class="col-md-4 mb-3">
            <label>Community Contribution:</label>
            <InputNumber @bind-Value="LeaderboardPM.CommunityContribution" class="form-control" />
            <ValidationMessage For="@(() => LeaderboardPM.CommunityContribution)" />
        </div>

        <div class="col-md-4 mb-3">
            <InputCheckbox @bind-Value="LeaderboardPM.IsTopRanked" class="form-check-input" id="topCheck" />
            <label class="form-check-label" for="topCheck">Top Ranked?</label>
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <span class="text-danger ms-3">@Message</span>
</EditForm>

<hr />

<!-- TABLE hiển thị -->
<table class="table table-responsive table-striped table-bordered">
    <thead class="table-primary">
        <tr>
            <th>User ID</th>
            <th>Plan ID</th>
            <th>Days Smoke-Free</th>
            <th>Money Saved</th>
            <th>Rank</th>
            <th>Achievements</th>
            <th>Score</th>
            <th>Note</th>
            <th>Streak</th>
            <th>Community</th>
            <th>Top Rank?</th>
            <th>Create Time</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Leaderboards)
        {
            <tr>
                <td class="text-center">@item.UserId</td>
                <td class="text-center">@item.PlanId</td>
                <td class="text-center">@item.DaySmokeFree</td>
                <td class="text-center">@item.MoneySave</td>
                <td class="text-center">@item.RankPosition</td>
                <td class="text-center">@item.TotalAchievements</td>
                <td class="text-center">@item.ProgressScore</td>
                <td>@item.Note</td>
                <td class="text-center">@item.StreakCount</td>
                <td class="text-center">@item.CommunityContribution</td>
                <td class="text-center">
                    @(item.IsTopRanked ? "✅" : "❌")
                </td>
                <td class="text-center">@item.CreatedTime</td>
            </tr>
        }
    </tbody>
</table>

@code {
    public LeaderboardsDuongLntPostModel LeaderboardPM { get; set; } = new();
    public LeaderboardsDuongLnt Leaderboard { get; set; } = new();
    public List<LeaderboardsDuongLnt> Leaderboards { get; set; } = new();
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var handler = new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
                };

            using var httpClient = new HttpClient(handler)
                {
                    BaseAddress = new Uri("https://10.0.2.2:7296/")
                };

            Leaderboards = await httpClient.GetFromJsonAsync<List<LeaderboardsDuongLnt>>("gateway/Leaderboards");
        }
        catch (Exception ex)
        {
            Message = $"❌ Lỗi khi tải dữ liệu: {ex.Message}";
        }
    }

    protected async Task OcelotSubmit()
    {
        try
        {
            Leaderboard = new LeaderboardsDuongLnt()
                {
                    UserId = 1,
                    PlanId = 4,
                    DaySmokeFree = LeaderboardPM.DaySmokeFree,
                    MoneySave = LeaderboardPM.MoneySave,
					RankPosition = LeaderboardPM.RankPosition,
					TotalAchievements = LeaderboardPM.TotalAchievements,
					ProgressScore = LeaderboardPM.ProgressScore,
					Note = LeaderboardPM.Note,
					StreakCount = LeaderboardPM.StreakCount,
					CommunityContribution = LeaderboardPM.CommunityContribution,
					IsTopRanked = LeaderboardPM.IsTopRanked
                };

            //var handler = new HttpClientHandler();
            var handler = new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true
                };

            //using (var httpClient = new HttpClient())
            using (var httpClient = new HttpClient(handler))
            {
                var serializeContent = System.Text.Json.JsonSerializer.Serialize(Leaderboard);

                var baseAddress = "https://10.0.2.2:7296/gateway/Leaderboards";

                var response = await httpClient.PostAsync(baseAddress, new StringContent(serializeContent, Encoding.UTF8, "application/json"));

                if (response.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    Message = "Submit to Microservice success";
                    Leaderboards.Add(Leaderboard);
                }
                else
                {
                    Message = "Submit Order to Microservice fail";
                }
            }
        }
        catch (Exception ex)
        {
            Message = ex.ToString();
        }
    }
}