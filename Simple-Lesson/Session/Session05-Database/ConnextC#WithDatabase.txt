GIẢI NGỐ KẾT NỐI C# VÀ CƠ SỞ DỮ LIỆU

> C# và Java, và các ngôn ngữ lập trình khi chơi với CSDL - Thế giới thì cần phải có đồ chơi - Đồ chơi chính là các thư viện/code có sẵn do các công ty viết ra giúp dân Dev nhanh chóng, dễ dàng thao tác CRUD Data của các Table

NNLT	--------------------------------------------CSDL
C#, Java			CRUD	        SQL Server, MySQL, MONGODB
			Thư viện - Dependency

> CÓ 2 CÁCH ĐỂ NNLT CHƠI VỚI CSDL: CODE FIRST VÀ DATABASE FIRST

CORE FIRST >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

NNLT -----------------------------------------------------------------------------------CSDL
C#, Java					LIB/DEPENDENCY			SQL Server, MySQL, MONGODB
Các Class Map xuống Table	----------------------------------------------> Từ Code tạo ra Table
Các Class cũng có Relationship

DATABASE FIRST >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PE CHƠI DB FIRST

NNLT ------------------------------------------------------------------------------------CSDL
C#, Java					LIB/DEPENDENCY			SQL Server, MySQL, MONGODB
Các Class Map xuống Table	<---------------------------------------------- Có sẵn Table, sẵn Data
Các Class cũng có Relationship		   Suy ngược ra Entity Class		Có sẵn Relationship trong table

1. ENTITY FRAMEWORK CORE LÀ GÌ?????
*LÀ BỘ THƯ VIỆN CHUẨN CỦA MICROSOFT GIÚP DÂN DEV TRÊN MÔI TRƯỜNG .NET LÀM VIỆC VỚI CSDL THUẬN TIỆN, NHANH CHÓNG, HIỆU QUẢ, KO CẦN BIẾT CÂU SQL
 > Java thì ta dùng 1 bộ thư viện tương đương, đó chính là JPA/HIBERNATE
* C# ngoài Entity Framework Core, còn 1 thư viện nổi tiếng khác ko chính hãng (Nhóm Dev KO của Microsoft viết ra - Third Party)  - Dapper!!!!

------------------------------------------------------------------------------------------------------------------------------
KỸ THUẬT LẬP TRÌNH VỚI CSDL MÀ KO CẦN VIẾT CÂU SQL -> GỌI LÀ ORM - OBJECT RELATIONAL MAPPING, CHỈ CHƠI CODE OOP MÀ VẪN CRUD ĐƯỢC DATABASE.
------------------------------------------------------------------------------------------------------------------------------

* Neu16 ta ko chơi EF Core thì ta dùng phương pháp truyền thống - phải viết câu SQL trong Code!!!! - ADO.NET (C#)
												   - JDBC (JAVA)

NNLT	--------------------------------------------CSDL
C#, Java			CRUD	        SQL Server, MySQL, MONGODB
			Thư viện - Dependency
			 ADO.NET    EF Core

2. EF CORE GỒM NHỮNG GÌ?????
- EF Core là bộ thư viện chuẩn của Microsoft giúp nối C#, VB.NET với CSDL mà ko cần viết SQL.
- Nó là những File .dll được tải về từ NuGet.org (Kho chứa file .dll của cộng đồng Microsoft) và được Add vào Project, và được Add vào bộ lệnh đi kèm lệnh DOTNET.EXE (Đã từng học khi cài .NET SDK).

* EF Core gồm 2 nhóm .dll
>>>>> NHÓM 1: Những dll hỗ trợ cho lệnh DOTNET.EXE để giúp phát sinh Entity Class từ Database
	     * Tải .dll này về dùng lệnh:
			dotnet tool install --global dotnet-ef --version 8.*
			dotnet tool list --global			//Kiểm tra đã cài thành công chưa

	     * Lệnh để phát sinh Entity Class từ Table: (DB SCAFFOLD - Dựng dàn khung Class Map với Table)
		dotnet ef dbcontext scaffold "Server=(local);Database= BookManagementDb;UID=sa;PWD=12345;TrustServerCertificate=True" "Microsoft.EntityFrameworkCore.SqlServer" --output-dir "Entities" --context-dir ".\"


>>>>> NHÓM 2: Gồm các .dll (Java gọi là file .JAR khai báo trong file POM.XML)
	     * Tải về qua Add Dependency trên cái Project Repository
	     * Tải 4 Package - 4 Namespace
> Microsoft.EntityFrameworkCore
> Microsoft.EntityFrameworkCore.Design
> Microsoft.EntityFrameworkCore.Tools
> Microsoft.EntityFrameworkCore.SqlServer

3. TA GÕ LỆNH ĐỂ SUY NGƯỢC TỪ TABLE THÀNH CLASS - ĐÃ HỌC RỒI!!!!!

4. FILE DBCONTEXT - ĐÂY LÀ TẬP TIN LÕI, QUAN TRỌNG NHẤT KHI CHƠI VỚI CSDL
- Nó sẽ được tự động tạo ra nếu ta chơi trò Database First qua lệnh DB SCAFFOLD
  Và nó chính là đại diện cho cái CSDL mình đang thao tác
  Và nó chính là Class Cabinet chứa danh sách các Table mà mình đang thao tác
  CSDL có 5 Table, thì Cabinet có 5 List, mỗi List ứng với 1 Table
  CSDL có 10 Table, thì Cabinet có 10 List, mỗi List ứng với 1 table
  (Bài Cabinet chuẩn ta đã học thì Cabinet chỉ chứa 1 List<T>, T có thể là Student, Lecturer,.....)
  (DB Context chứa luôn List<Student>, 1 List<Lecturer>
  Gộp N List ứng với N Table luôn cho tiện thao tác)

CẤU TRÚC CỦA DBCONTEXT

DBCONTEXT --------------------------------------------------------------DATABASE THỰC SỰ (NƠI CÓ NHIỀU TABLE)
List<Book-Category>								Table Category
.ADD (New Book-Category)							Insert Into Category values.....

List<Book>									Table Book
.ADD(New Book(...){...})							Insert Into Book values....
CRUD METHOD									Update, Delete

List<Account>									Table Account (Dùng chưa Info Login)
.CRUD METHOD									CRUD Sql

List thực tế trong Code thay bằng DbSet<Book>
				  DbSet<Category>
				  DbSet<Account>
số hàm của DbSet nhiều hơn List, do dính đến DB.....

OnConfiguring() //Đây là hàm quan trọng, vì nó chứa chuỗi kết nối CSDL - Connection String
		//Ghi rõ, IP nào, Server, Máy nào, CSDL nào, User/Pass Login vào Db Server....

CHUỖI KẾT NỐI CSDL - CONNECTION STRING - ĐƯỢC COPY TỪ LỆNH DB SCAFFOLD TA GÕ LÚC GENERATE RA ENTITY CLASS
Ta cần chuỗi này để giúp Code giao tiếp với CSDL
- Chuỗi này gắn với Project tương lai gắn với DLL - Hard-Cored. Ko tốt khi ta cần bảo mật chuỗi kết nối, ta đổi info kết nối, ta phải mở Source sửa info, sửa xong ta lại biên dịch, đóng gói lại APP

- Dân Dev thường tách Connection Sting ra 1 file cấu hình riêng
Sau này đổi info kết nối -> sửa file cấu hình là ủ -> App chơi với Server mới!!!!

-> Bắt buộc phải làm với bài thi PE, hoặc 0 điểm

!!!!Chỉ cần nhớ cách làm, cú pháp gõ thì có sẵn trong đề thi!!

- Ta tạo 1 file cấu hình kiểu đuôi .JSON, Paste cái chuỗi kết nối CSDL vào File này
- Viết 1 cái hàm đọc cái chuỗi Connection String này trong DBContext, sửa Hàm OnConfiguring để gọi hàm đọc chuỗi này

- Đoạn Code có trong đề thi!!! Ko cần học thuộc lòng dùng Code

- Nhớ để Code đọc File .JSON chạy được, ta cần thêm Dependency xử lý file .JSON
> Microsoft.Extensions.Configuration
> Microsoft.Extensions.Configuration.Json
